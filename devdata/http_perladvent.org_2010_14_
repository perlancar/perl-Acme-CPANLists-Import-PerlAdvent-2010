<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.21 (Pod::Simple 3.07, Perl::Tidy 20090616) on 2010-12-15 00:03:42 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2010 Perl Advent Calendar: All I want for Christmas is something newer than 5.5.3</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod14.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2010-12</a>-14</h1>
<h2 align="center">All I want for Christmas is something newer than 5.5.3</h2>
<h3 align="center">by Jerrad Pierce</h3>
<p>If your shop is anything like Santa's, you probably have a number of legacy systems kicking about concerns of a special breed of feature creep: the incorporation of nifty but non-nessential modern syntax in new code precluding its use with older versions of perl. Fortunately a certain clever Aussie&mdash;no not him, the other one&mdash;has seen fit to provide a tool to check for just such issues, <tt><a href="http://search.cpan.org/perldoc?Perl::MinimumVersion" title="Perl::MinimumVersion">Perl::MinimumVersion</a></tt>. Since it's built on <tt>PP<span style="font-style: italic">/tt</span>, it theoretically has the ability to recognize whether potentially offending code is protected by an <tt><span class="k">eval</span></tt>, like the else block below:</p>
<pre>
<span class="c">#MAGIC minifig0</span>
  <span class="i">$self</span>-&gt;{<span class="w">_file</span>} = <span class="i">_canonical</span><span class="s">(</span><span class="i">$self</span>-&gt;{<span class="k">-d</span>}<span class="cm">,</span> <span class="i">$self</span>-&gt;{<span class="k">-f</span>}<span class="cm">,</span> <span class="q">qr/\.[ft]lf/</span><span class="cm">,</span>
                              <span class="i">$^O</span> =~ <span class="q">/MSWin32|DOS/i</span><span class="s">)</span><span class="sc">;</span>
  <span class="i">$self</span>-&gt;{<span class="w">_file</span>} = <span class="s">(</span><span class="k">glob</span><span class="s">(</span><span class="i">$self</span>-&gt;{<span class="w">_file</span>}.<span class="q">&#39;.?lf&#39;</span><span class="s">)</span><span class="s">)</span>[<span class="n">0</span>] <span class="k">unless</span> <span class="k">-e</span> <span class="i">$self</span>-&gt;{<span class="w">_file</span>}<span class="sc">;</span>

  <span class="i">$self</span>-&gt;{<span class="w">_fh</span>} = <span class="w">gensym</span><span class="sc">;</span>            <span class="c">#5.005 support</span>
  <span class="k">eval</span> <span class="q">&quot;use IO::Uncompress::Unzip&quot;</span><span class="sc">;</span>
  <span class="k">unless</span><span class="s">(</span> <span class="i">$@</span> <span class="s">)</span><span class="s">{</span>
      <span class="i">$self</span>-&gt;{<span class="w">_fh</span>} = <span class="k">eval</span><span class="s">{</span> <span class="w">IO::Uncompress::Unzip</span><span class="w">-&gt;new</span><span class="s">(</span><span class="i">$self</span>-&gt;{<span class="w">_file</span>}<span class="s">)</span> <span class="s">}</span> ||
          <span class="i">confess</span><span class="s">(</span><span class="q">&quot;No such file or directory: $self-&gt;{_file}&quot;</span><span class="s">)</span><span class="sc">;</span>
  <span class="s">}</span>
  <span class="k">else</span><span class="s">{</span>
      <span class="k">open</span><span class="s">(</span><span class="i">$self</span>-&gt;{<span class="w">_fh</span>}<span class="cm">,</span> <span class="q">&#39;&lt;&#39;</span>.<span class="i">$self</span>-&gt;{<span class="w">_file</span>}<span class="s">)</span> || <span class="i">confess</span><span class="s">(</span><span class="q">&quot;$!: $self-&gt;{_file}&quot;</span><span class="s">)</span><span class="sc">;</span>
      <span class="c">#$^W isn&#39;t mutable at runtime in 5.005, so we have to conditional eval</span>
      <span class="c">#to avoid &quot;Useless use of constant in void context&quot;</span>
      <span class="k">eval</span> <span class="q">&quot;binmode(\$fh, &#39;:encoding(utf8)&#39;)&quot;</span> <span class="k">unless</span> <span class="i">$]</span> &lt; <span class="n">5.006</span><span class="sc">;</span>
  <span class="s">}</span>
<span class="c">#MAGIC minifig1</span>
</pre>

<p>Alas, the reason <tt><a href="http://search.cpan.org/perldoc?App::MinimumVersion" title="App::MinimumVersion">perlver</a></tt> currently thinks the above code&mdash;from <tt>Text::FIGlet</tt>, which purposefully maintains backwards compatability&mdash;is Perl 5.0053 compataible because it's not aware of IO layers, not because it sees the modern syntax is safely inside a string <tt><span class="k">eval</span></tt>.</p>
<pre><span class="c">% perlver lib/Text/FIGlet/Font.pm 

   ------------------------------------------------------  
 | file                    | explicit | syntax | external |
 | ------------------------------------------------------ |
 | lib/Text/FIGlet/Font.pm | ~        | v5.5.3 | n/a      |
 | ------------------------------------------------------ |
 | Minimum explicit version : ~                             |
 | Minimum syntax version   : v5.5.3                        |
 | Minimum version of perl  : v5.5.3                        |
   ------------------------------------------------------</span></pre>
<p>However it will pick up on a number of issues like 3-arg open or INIT blocks, and could be easily updated by some kindly elves to cover more cases. Even its current state though, <tt><span title="App::MinimumVersion">App::MinimumVersion</span></tt> would be a nice addition to pre-check-in automated tests of code kwalitee.</p>
<div style="float: right; font-size: 10pt"><a href="mod14.pod">View Source (POD)</a></div><br />
</body>
</html>
