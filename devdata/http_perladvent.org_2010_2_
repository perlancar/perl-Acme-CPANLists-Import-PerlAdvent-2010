<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.20 (Pod::Simple 3.07, Perl::Tidy 20090616) on 2010-12-01 23:29:58 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2010 Perl Advent Calendar: Setting the bar high with an array of unique gifts</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod2.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2010-12</a>-02</h1>
<h2 align="center">Setting the bar high with an array of unique gifts</h2>
<h3 align="center">by Adam Russell</h3>
<p>Not every elf studies the theory and craft of toymaking at elf college. Some elves study more abstract but less employable subjects and come to toy making after making the sad realization that very few people care to, say, discuss that shiny new Rubik's Cube that Santa dropped off in terms of Galois Theory.<sup><a href="#footnote_note0">1</a></sup> Of course, there are some happy intersections between the abstract and the practical. <tt><a href="http://search.cpan.org/perldoc?Set::Array">Set::Array</a></tt> is an example of one such useful application of the abstract&mdash;Set Theory&mdash;towards cleaner and more maintainable code. <tt>Set::Array</tt> essentially wraps arrays in a class that defines higher level functions on the internal data. Of course you can still do the basics. The code below shows some of the classic array functions anyone would expect.</p>
<p>Running this:</p>
<pre>
<span class="k">my</span> <span class="i">$sa0</span>=<span class="w">Set::Array</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">qw/b a yams tartes/</span><span class="s">)</span><span class="sc">;</span>
<span class="i">$sa0</span><span class="i">-&gt;pop</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="c">#methods that that throw pies aren&#39;t chainable</span>
<span class="i">$sa0</span><span class="i">-&gt;unshift</span><span class="s">(</span><span class="q">&#39;cider&#39;</span><span class="s">)</span><span class="i">-&gt;delete</span><span class="s">(</span><span class="q">&#39;yams&#39;</span><span class="s">)</span><span class="i">-&gt;reverse</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
</pre>

<p>Results in a <tt><span class="i">$sa0</span></tt> <tt>Set::Array</tt> object with elements <code>(a, b, cider)</code></p>
<p>But such functionality is simply the new pair of underwear under the tree when what you really want is a train set! Let us direct our attention to the well hidden and expertly wrapped gifts in the corner under the stairs.</p>
<p><tt>Set::Array</tt> comes with a variety of parent-approved<sup><a href="#footnote_note1">2</a></sup> Nerf weaponry to attack our array-like objects with ammunition ranging from the canonical <tt><span class="i">union</span><span class="s">(</span><span class="s">)</span></tt> on line 36 for our sample script, to the sugary <tt><span class="k">join</span><span class="s">(</span><span class="s">)</span></tt> on 38 and esoteric <tt><span class="i">bag</span><span class="s">(</span><span class="s">)</span></tt> on lines 35 and 53.</p>
<p><tt><span class="i">bag</span><span class="s">(</span><span class="s">)</span></tt> is a bit of a departure from "real" sets in that it does not exclude duplicates. To ensure uniqueness to elements the module comes with a very necessary <tt><span class="i">unique</span><span class="s">(</span><span class="s">)</span></tt> function which is included presumably to, you know, actually allow us to convincingly use the word "set". ho ho ho.</p>
<p>Given another array&hellip;</p>
<pre>
<span class="k">my</span> <span class="i">$sa1</span>=<span class="w">Set::Array</span><span class="w">-&gt;new</span><span class="s">(</span><span class="n">0</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="q">&#39;cider&#39;</span><span class="cm">,</span><span class="q">&#39;eggnog&#39;</span><span class="s">)</span><span class="sc">;</span>
</pre>

<p>&hellip;we can test some of the more set-like operations amongst the thirty-odd methods available:</p>
<pre>
<span class="k">print</span> <span class="i">$sa0</span><span class="i">-&gt;difference</span><span class="s">(</span><span class="i">$sa1</span><span class="s">)</span><span class="i">-&gt;join</span><span class="s">(</span><span class="q">&#39;, &#39;</span><span class="s">)</span><span class="sc">;</span>
<span class="c">#a, b</span>

<span class="k">print</span> <span class="i">$sa0</span><span class="i">-&gt;intersection</span><span class="s">(</span><span class="i">$sa1</span><span class="s">)</span><span class="i">-&gt;join</span><span class="s">(</span><span class="q">&#39;, &#39;</span><span class="s">)</span><span class="sc">;</span>
<span class="c">#a, b, cider</span>

<span class="k">print</span> <span class="i">$sa0</span><span class="i">-&gt;symmetric_difference</span><span class="s">(</span><span class="i">$sa1</span><span class="s">)</span><span class="i">-&gt;join</span><span class="s">(</span><span class="q">&#39;, &#39;</span><span class="s">)</span><span class="sc">;</span>
<span class="c">#1, a, 0, b, eggnog</span>
</pre>

<p>In case you've forgotten your math, that last one returns the elements that occur in either set but do not also occur in the intersection.</p>
<p>Finally, it should be mentioned that the proper set operations implemented by <tt>Set::Array</tt> also come with overloaded operator synonyms i.e; <tt>+</tt>, <tt><span class="i">&amp;</span></tt>, <tt>-</tt>, <tt><span class="i">*</span></tt>, and <tt><span class="i">%</span></tt> They were left out of the examples since overloaded operators bring back ghosts of C++ courses past.</p>
<a name="mod2.pl" id="mod2.pl"></a><h2><a href="mod2.pl">mod2.pl</a></h2><pre>
   1 <span class="c"># Keeping with the spirit of fun there is some slight obfuscation</span>
   2 <span class="c"># and possibly questionable coding practices in an attempt to show off as many</span>
   3 <span class="c"># Set-Array functions as possible. Also there is some questionable grammar.</span>
   4 <span class="c"># The singular form of geese-a-laying surely isn&#39;t geese-a-laying is it?</span>
   5 <span class="c"># Healthy pours of some wassail will relieve my mind (and yours) of these</span>
   6 <span class="c"># concerns and induce some holiday cheer... Adam Russell ac.russell@live.com</span>
   7 
   8 <span class="k">use</span> <span class="w">Set::Array</span><span class="sc">;</span>  
   9 <span class="k">my</span> <span class="i">@gifts_per_day</span>=<span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  10 <span class="k">my</span> <span class="i">@cardinals</span>=<span class="q">qw(first second third fourth</span>
  11                  <span class="q">fifth sixth seventh eighth</span>
  12                  <span class="q">ninth tenth eleventh twelfth)</span><span class="sc">;</span>
  13 <span class="k">my</span> <span class="i">@gifts</span>=<span class="q">qw(partridge </span>
  14              <span class="q">turtle-dove </span>
  15              <span class="q">french-hens</span>
  16              <span class="q">calling-bird</span>
  17              <span class="q">golden-ring</span>
  18              <span class="q">geese-a-laying</span>
  19              <span class="q">swan-a-swimming</span>
  20              <span class="q">maid-a-milking</span>
  21              <span class="q">lady-dancing</span>
  22              <span class="q">lord-a-leaping</span>
  23              <span class="q">piper-piping</span>
  24              <span class="q">drummer-drumming)</span><span class="sc">;</span>
  25 
  26 <span class="k">foreach</span> <span class="k">my</span> <span class="i">$day</span> <span class="s">(</span><span class="n">1</span>..<span class="n">12</span><span class="s">)</span><span class="s">{</span> <span class="c">#the song wins--there is no 0th day of Christmas!</span>
  27     <span class="i">$gifts_per_day</span>[<span class="i">$day</span>]=<span class="w">Set::Array</span><span class="w">-&gt;new</span><span class="s">(</span><span class="k">split</span><span class="s">(</span><span class="q">/\s/</span><span class="cm">,</span> <span class="q">&quot;$gifts[$day-1] &quot;</span> x <span class="i">$day</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span>
  28 <span class="s">}</span>
  29 
  30 <span class="k">my</span> <span class="i">$total_gifts</span>=<span class="w">Set::Array</span><span class="w">-&gt;new</span><span class="sc">;</span>
  31 <span class="k">my</span> <span class="i">$total_unique_gifts</span>=<span class="w">Set::Array</span><span class="w">-&gt;new</span><span class="sc">;</span>
  32 
  33 <span class="k">foreach</span> <span class="k">my</span> <span class="i">$day</span> <span class="s">(</span><span class="n">1</span>..<span class="n">12</span><span class="s">)</span><span class="s">{</span>
  34     <span class="k">my</span> <span class="i">$gifts</span>=<span class="i">gift_calculator</span><span class="s">(</span><span class="i">$day</span><span class="s">)</span><span class="sc">;</span>
  35     <span class="i">$total_gifts</span><span class="i">-&gt;bag</span><span class="s">(</span><span class="i">$gifts</span><span class="s">)</span><span class="sc">;</span> <span class="c">#bag keeps duplicates</span>
  36     <span class="i">$total_unique_gifts</span><span class="i">-&gt;union</span><span class="s">(</span><span class="i">$gifts</span><span class="s">)</span><span class="sc">;</span> <span class="c">#union discards duplicates</span>
  37     <span class="k">print</span> <span class="q">&quot;On the $cardinals[$day-1] of Christmas my true love gave to me the following lovely gifts: &quot;</span><span class="sc">;</span>
  38     <span class="i">$gifts</span><span class="i">-&gt;join</span><span class="s">(</span><span class="q">&quot; &quot;</span><span class="s">)</span><span class="i">-&gt;print</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span>
  39 <span class="s">}</span>
  40 
  41 <span class="k">my</span> <span class="i">$total_number_gifts</span>=<span class="i">$total_gifts</span><span class="i">-&gt;length</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  42 <span class="k">my</span> <span class="i">$total_number_geese</span>=<span class="i">$total_gifts</span><span class="i">-&gt;count</span><span class="s">(</span><span class="i">$gifts</span>[<span class="n">5</span>]<span class="s">)</span><span class="sc">;</span>
  43 <span class="k">my</span> <span class="i">$unique_gifts</span>=<span class="i">$total_unique_gifts</span><span class="i">-&gt;length</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  44 
  45 <span class="k">print</span> <span class="q">&quot;I received $total_number_gifts gifts!\n&quot;</span><span class="sc">;</span>
  46 <span class="k">print</span> <span class="q">&quot;But I only got $unique_gifts different sorts of things...\n&quot;</span><span class="sc">;</span>
  47 <span class="k">print</span> <span class="q">&quot;What am I supposed to do with $total_number_geese $gifts[5]? Are they going to eat much?\n&quot;</span><span class="sc">;</span>
  48 
<a name="gift_calculator"></a>  49 <span class="k">sub </span><span class="m">gift_calculator</span><span class="s">{</span>
  50     <span class="k">my</span> <span class="i">$todays_gifts</span>=<span class="w">Set::Array</span><span class="w">-&gt;new</span><span class="sc">;</span>
  51     <span class="k">my</span> <span class="i">$current_day</span>=<span class="k">shift</span> <span class="i">@_</span><span class="sc">;</span>
  52     <span class="k">foreach</span> <span class="k">my</span> <span class="i">$day</span> <span class="s">(</span><span class="n">1</span>..<span class="i">$current_day</span><span class="s">)</span><span class="s">{</span> <span class="c">#use bag() to bag the gifts!</span>
  53         <span class="i">$todays_gifts</span><span class="i">-&gt;bag</span><span class="s">(</span><span class="i">$gifts_per_day</span>[<span class="i">$day</span>]<span class="s">)</span><span class="sc">;</span>
  54     <span class="s">}</span>
  55     <span class="k">return</span> <span class="i">$todays_gifts</span><span class="sc">;</span>
  56 <span class="s">}</span>
</pre>
<p><a name="footnote_note0" id="footnote_note0"></a>1. Hans Zassenhaus, Rubik's cube: A toy, a galois tool, group theory for everybody, Physica A: Statistical Mechanics and its Applications, Volume 114, Issues 1-3, August 1982, Pages 629-637, ISSN 0378-4371, DOI: <a href="http://www.sciencedirect.com/science/article/B6TVG-46J0R6R-5D/2/2a5c22348a33973c2dcad28f30d6ea41">10.1016/0378-4371(82)90362-4</a><br>
</p>
<p><a name="footnote_note1" id="footnote_note1"></a>2. The modification of the caller $sa0 is because of the void context. If we had called the function in a list context&hellip;<br>
<pre>
<span class="k">my</span> <span class="i">@sack</span>=<span class="i">$sa0</span><span class="i">-&gt;bag</span><span class="s">(</span><span class="i">$sa1</span><span class="s">)</span><span class="sc">;</span>
</pre>

&hellip;then $sa0 is unmodified and the result of the operation is assigned to @sack.<br>
</p>
<div style="float: right; font-size: 10pt"><a href="mod2.pod">View Source (POD)</a></div><br />
</body>
</html>
