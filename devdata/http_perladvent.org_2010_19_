<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.21 (Pod::Simple 3.07, Perl::Tidy 20090616) on 2010-12-21 00:18:10 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2010 Perl Advent Calendar: So, umm, I told Santa what I wanted and he was totally, like, whatever&hellip;</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod19.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2010-12</a>-19++</h1>
<h2 align="center">So, umm, I told Santa what I wanted and he was totally, like, whatever&hellip;</h2>
<h3 align="center">by Adam Russell &amp; Jerrad Pierce</h3>
<p>The elves in Santa's shop are a fun-loving but superstitious folk, and pranced about with glee when they discovered that today's entry aligned with <a href="http://perl6advent.wordpress.com/2009/12/19/day-19-whatever/"> another Perl Advent Calendar</a>. <tt><a href="http://search.cpan.org/perldoc?Whatever" title="Whatever">Whatever</a></tt> allows us to use some of Perl 6's "whatever-star" magic in P5. What does this give us? How does it work? <tt><span class="k">use</span> <span class="w">Whatever</span><span class="sc">;</span></tt> to access "whatever-terms" <tt><span class="i">&amp;*</span></tt>,<tt><span class="i">$*</span></tt><sup><a href="#footnote_note0">1</a></sup>, <tt><span class="i">&amp;@</span></tt> , and <tt><span class="i">&amp;_</span></tt>; as punctuation variables these are magically global. All four behave in the same way: you get back a coderef which will later perform the actions defined by the statement they are used in when a value is passed for it to act upon. In computer sciencey words you could say that the whole expression is returned as a closure, resulting in a curried<sup><a href="#footnote_note1">2</a></sup> function.</p>
<p>The differences between the four spellings of whatever alter what it stands in for:</p>
<p><ul> <li><tt><span class="i">&amp;*</span></tt> and <tt><span class="i">$*</span></tt> favor <tt><span class="i">$_</span>[<span class="n">0</span>]</tt> over <tt><span class="i">$_</span></tt> if available</li> <li><tt><span class="i">&amp;@</span></tt> always uses <tt><span class="i">$_</span>[<span class="n">0</span>]</tt></li> <li><tt><span class="i">&amp;_</span></tt> always takes $_</li> </ul></p>
<p>Let's delight the easily-amused<sup><a href="#footnote_note2">3</a></sup> with some small tricks&hellip;</p>
<a name="mod19.pl" id="mod19.pl"></a><h2><a href="mod19.pl">mod19.pl</a></h2><pre>
<a name="mod19.pl.1"></a>   1 <span class="c"># Whatever does this code do?</span>
<a name="mod19.pl.2"></a>   2 <span class="c"># Adam Russell ac.russell@live.com</span>
<a name="mod19.pl.3"></a>   3 <span class="k">use</span> <span class="w">Whatever</span><span class="sc">;</span> 
<a name="mod19.pl.4"></a>   4 
<a name="mod19.pl.5"></a>   5 <span class="i">$add_2</span> = <span class="n">2</span> + <span class="i">$*</span><span class="sc">;</span> <span class="c"># A typical example of currying   </span>
<a name="mod19.pl.6"></a>   6 <span class="k">print</span> <span class="q">&quot;\$* \$add_2-&gt;(5)=&quot;</span><span class="cm">,</span><span class="i">$add_2</span>-&gt;<span class="s">(</span><span class="n">5</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;\n&quot;</span><span class="sc">;</span>
<a name="mod19.pl.7"></a>   7 
<a name="mod19.pl.8"></a>   8 <span class="i">$add_2</span> = <span class="n">2</span> + <span class="i">&amp;*</span><span class="sc">;</span> <span class="c"># Same example with &amp;*   </span>
<a name="mod19.pl.9"></a>   9 <span class="k">print</span> <span class="q">&quot;&amp;* \$add_2-&gt;(5)=&quot;</span><span class="cm">,</span><span class="i">$add_2</span>-&gt;<span class="s">(</span><span class="n">5</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;\n&quot;</span><span class="sc">;</span>
<a name="mod19.pl.10"></a>  10 
<a name="mod19.pl.11"></a>  11 <span class="c">#Can be used with map()</span>
<a name="mod19.pl.12"></a>  12 <span class="i">@test_data</span>=<span class="s">(</span><span class="n">0</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="n">3</span><span class="cm">,</span><span class="n">4</span><span class="cm">,</span><span class="n">5</span><span class="cm">,</span><span class="n">6</span><span class="cm">,</span><span class="n">7</span><span class="cm">,</span><span class="n">8</span><span class="cm">,</span><span class="n">9</span><span class="s">)</span><span class="sc">;</span>
<a name="mod19.pl.13"></a>  13 <span class="i">@test_data_plus_2</span>=<span class="k">map</span> <span class="s">(</span><span class="i">$add_2</span>-&gt;<span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="cm">,</span> <span class="i">@test_data</span><span class="s">)</span><span class="sc">;</span>
<a name="mod19.pl.14"></a>  14 <span class="i">$with_2_added</span>=<span class="k">join</span> <span class="q">&#39;,&#39;</span><span class="cm">,</span><span class="i">@test_data_plus_2</span><span class="sc">;</span>
<a name="mod19.pl.15"></a>  15 <span class="k">print</span> <span class="q">&quot;test_data_array_plus_2 $with_2_added\n&quot;</span><span class="sc">;</span>
<a name="mod19.pl.16"></a>  16 
<a name="mod19.pl.17"></a>  17 <span class="c"># A more complex example. Uses multiple whatever-star terms</span>
<a name="mod19.pl.18"></a>  18 <span class="i">@test_data</span>=<span class="s">(</span><span class="n">0</span><span class="cm">,</span><span class="n">1</span><span class="cm">,</span><span class="n">2</span><span class="cm">,</span><span class="n">3</span><span class="cm">,</span><span class="n">4</span><span class="cm">,</span><span class="n">5</span><span class="cm">,</span><span class="n">6</span><span class="cm">,</span><span class="n">7</span><span class="cm">,</span><span class="n">8</span><span class="cm">,</span><span class="n">9</span><span class="s">)</span><span class="sc">;</span>
<a name="mod19.pl.19"></a>  19 <span class="i">$sum</span>=<span class="i">&amp;*</span><span class="sc">;</span>
<a name="mod19.pl.20"></a>  20 <span class="k">foreach</span> <span class="s">(</span><span class="n">0</span>..<span class="s">(</span><span class="i">$#test_data</span>-<span class="n">1</span><span class="s">)</span><span class="s">)</span><span class="s">{</span>
<a name="mod19.pl.21"></a>  21     <span class="i">$sum</span>=<span class="i">$sum</span> + <span class="i">&amp;*</span><span class="sc">;</span>
<a name="mod19.pl.22"></a>  22 <span class="s">}</span>
<a name="mod19.pl.23"></a>  23 <span class="i">$a</span>=<span class="i">$sum</span>-&gt;<span class="s">(</span><span class="i">@test_data</span><span class="s">)</span><span class="sc">;</span>
<a name="mod19.pl.24"></a>  24 <span class="k">print</span> <span class="q">&quot;sum &quot;</span><span class="cm">,</span><span class="q">&quot;$a\n&quot;</span><span class="sc">;</span>
<a name="mod19.pl.25"></a>  25 
<a name="mod19.pl.26"></a>  26 <span class="c"># star terms bind lazily. This allows us to change a variable between calls</span>
<a name="mod19.pl.27"></a>  27 <span class="i">$mod</span>=<span class="n">0</span><span class="sc">;</span>
<a name="mod19.pl.28"></a>  28 <span class="k">my</span> <span class="i">$filter</span>=<span class="s">(</span><span class="s">(</span><span class="i">$*</span> % <span class="n">2</span><span class="s">)</span> == <span class="i">$mod</span><span class="s">)</span><span class="sc">;</span>
<a name="mod19.pl.29"></a>  29 <span class="c"># filter evens</span>
<a name="mod19.pl.30"></a>  30 <span class="i">@evens</span> = <span class="k">grep</span><span class="s">(</span><span class="i">$filter</span>-&gt;<span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="cm">,</span><span class="i">@test_data</span><span class="s">)</span><span class="sc">;</span>  
<a name="mod19.pl.31"></a>  31 <span class="k">print</span> <span class="q">&quot;evens &quot;</span><span class="cm">,</span><span class="k">join</span><span class="s">(</span><span class="q">&#39; &#39;</span><span class="cm">,</span><span class="i">@evens</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;\n&quot;</span><span class="sc">;</span>
<a name="mod19.pl.32"></a>  32 <span class="c"># filter odds</span>
<a name="mod19.pl.33"></a>  33 <span class="i">$mod</span>=<span class="n">1</span><span class="sc">;</span>
<a name="mod19.pl.34"></a>  34 <span class="i">@odds</span>=<span class="k">grep</span><span class="s">(</span><span class="i">$filter</span>-&gt;<span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="cm">,</span><span class="i">@test_data</span><span class="s">)</span><span class="sc">;</span> 
<a name="mod19.pl.35"></a>  35 <span class="k">print</span> <span class="q">&quot;odds  &quot;</span><span class="cm">,</span><span class="k">join</span><span class="s">(</span><span class="q">&#39; &#39;</span><span class="cm">,</span><span class="i">@odds</span><span class="s">)</span><span class="cm">,</span><span class="q">&quot;\n&quot;</span><span class="sc">;</span>
<a name="mod19.pl.36"></a>  36 
<a name="mod19.pl.37"></a>  37 <span class="c"># Finally, whatever-stars can be used to dereference a hash or array</span>
<a name="mod19.pl.38"></a>  38 <span class="i">%test_hash</span>=<span class="s">(</span><span class="n">0</span><span class="cm">,</span><span class="cm">=&gt;</span><span class="q">&quot;zero&quot;</span><span class="cm">,</span> <span class="n">1</span><span class="cm">=&gt;</span><span class="q">&quot;one&quot;</span><span class="cm">,</span> <span class="n">2</span><span class="cm">=&gt;</span><span class="q">&quot;two&quot;</span><span class="s">)</span><span class="sc">;</span>
<a name="mod19.pl.39"></a>  39 <span class="i">$val_2</span>=<span class="i">$*</span>-&gt;{<span class="n">2</span>}<span class="sc">;</span>
<a name="mod19.pl.40"></a>  40 <span class="i">$val</span>=<span class="i">$val_2</span>-&gt;<span class="s">(</span>\<span class="i">%test_hash</span><span class="s">)</span><span class="sc">;</span>
<a name="mod19.pl.41"></a>  41 <span class="k">print</span> <span class="q">&quot;val  &quot;</span><span class="cm">,</span><span class="i">$val</span><span class="cm">,</span><span class="q">&quot;\n&quot;</span><span class="sc">;</span>
</pre>
<p><a name="footnote_note0" id="footnote_note0"></a>1. Prior to its deprecation in 5.10, <tt><span class="i">$*</span></tt> enabled multi-line matching.<br>
</p>
<p><a name="footnote_note1" id="footnote_note1"></a>2. <a href="http://www.cs.nott.ac.uk/~gmh/faq.html#currying">Additional details on currying</a>.<br>
</p>
<p><a name="footnote_note2" id="footnote_note2"></a>3. You try not to be amused by the littlest thing after spending 12 hours gluing heads on nutcrackers.<br>
</p>
<div style="float: right; font-size: 10pt"><a href="mod19.pod">View Source (POD)</a></div><br />
</body>
</html>
