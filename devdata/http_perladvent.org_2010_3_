<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.20 (Pod::Simple 3.07, Perl::Tidy 20090616) on 2010-12-03 00:55:00 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2010 Perl Advent Calendar: Seasonal Help</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod3.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2010-12</a>-03</h1>
<h2 align="center">Seasonal Help</h2>
<h3 align="center">by Jerrad Pierce</h3>
<p>Santa doesn't have much work for his computer elves in the off-season, so he recently started contracting them out for the first three quarters of the year. Unfortunately for poor <a href="../../2008/13/">Gluggag&aelig;gir</a> most customers aren't using Unix-family systems. Worse still, he often has to create and support WordPress installations. Glugg was eventually able to convince some clients to <a href="http://wordpress.org/extend/plugins/one-time-password/">install a plug-in for one-time password support</a>. Of course, the desktops were not Debian and therefore lacked a native S/Key. Of course, being a good perl hack Glugg checked CPAN and found <tt>Crypt::SKey</tt>, but he needed to find a way to make its functionality accessible to his command prompt fearing Windows users. <tt><a href="http://www.darserman.com/Perl/Loft/">The GUI Loft</a></tt> to the rescue! <tt>Loft</tt> provides an intuitive GUI-based GUI designer shown in the screen shot below. With it you can produce a a non-threatening skin for you application with native platform controls based on <tt><a href="http://search.cpan.org/perldoc?Win32::GUI">Win32::GUI</a></tt>.</p>
<p>Thanks to WINE, Glugg had a snazzy interface for generating passkeys after a few minutes of banging around with a mouse on his Xm/OS laptop. Finally, he need only implement some event callbacks and his mission to bring security to the masses was complete.</p>
<p><hr></p>
<p>The specification for a <tt>Loft</tt> application's skin is stored in a small binary file which you can easily load using the <tt>Win32::GUI::Loft::Design</tt> class, although other methods are available to you. One short-coming of this otherwise easy-as-pie system though, is that <a href="http://www.darserman.com/Perl/Loft/reference.html#loading_the_file_yourself">despite the documentation's example</a>, the filename parameter to newScalar() is not optional. This means it is not possible to inline your <tt>Loft</tt> design file into <tt>DATA</tt> in an attempt to simplify distribution of your program.</p>
<p>Another minor peeve is that the position of the application in the window designer is stored in the binary and it serves as default location for the application window when it starts, although one could argue that this is a feature. If you find it a nuisance, you'll have to reposition the window programatically.</p>
<p>Finally, it shold be noted that <a href="http://www.pegland.net/Technical/OPIE/opie_login.html#key_generators">winkey32.exe</a> provides the same functionality as our example script, without all the dependencies/performance hit from PAR.</p>
<p><img src="screenshot.png" height="613" width="861" alt="The Gui Loft" /></p>
<p><h2><a href="otp2.gld">otp2.gld</a></h2></p>
<a name="otp2.pl" id="otp2.pl"></a><h2><a href="otp2.pl">otp2.pl</a></h2><pre>
   1 <span class="k">use</span> <span class="w">Win32</span> <span class="s">(</span><span class="s">)</span><span class="sc">;</span>
   2 <span class="k">use</span> <span class="w">Win32::GUI</span><span class="sc">;</span>
   3 <span class="k">use</span> <span class="w">Win32::GUI::Loft::Design</span><span class="sc">;</span>
   4 
   5 <span class="k">my</span> <span class="i">$binfmt</span> = <span class="q">&quot;otp2.gld&quot;</span><span class="sc">;</span>
   6 <span class="k">my</span> <span class="i">$layout</span> = <span class="w">Win32::GUI::Loft::Design</span><span class="w">-&gt;newLoad</span><span class="s">(</span><span class="i">$binfmt</span><span class="s">)</span> <span class="k">or</span>
   7   <span class="k">die</span><span class="s">(</span><span class="q">&quot;Could not open window file ($binfmt)&quot;</span><span class="s">)</span><span class="sc">;</span>
   8 
   9 <span class="i">$win</span> = <span class="i">$layout</span><span class="i">-&gt;buildWindow</span><span class="s">(</span><span class="s">)</span> <span class="k">or</span> <span class="k">die</span><span class="s">(</span><span class="q">&quot;Could not build window\n&quot;</span><span class="s">)</span><span class="sc">;</span>
  10 <span class="i">$win</span><span class="i">-&gt;Center</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="i">$win</span><span class="i">-&gt;Show</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span> <span class="c">#Window position is saved in layout...</span>
  11 <span class="i">$win</span><span class="i">-&gt;SetForegroundWindow</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  12 <span class="i">$win</span><span class="i">-&gt;param</span><span class="i">-&gt;SetFocus</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  13 <span class="i">Win32::GUI::Dialog</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>         <span class="c">#Event loop</span>
  14 
  15 
  16 <span class="k">use</span> <span class="w">vars</span> <span class="q">qw($win @param)</span><span class="sc">;</span>
  17 <span class="k">use</span> <span class="w">Crypt::SKey</span><span class="sc">;</span>
  18 
  19 <span class="i">sub ::param_MouseMiddleDown</span><span class="s">{</span>
  20   <span class="i">$win</span><span class="i">-&gt;param</span><span class="i">-&gt;Paste</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  21   <span class="i">$win</span><span class="i">-&gt;pass</span><span class="i">-&gt;SetFocus</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  22 <span class="s">}</span>
  23 
  24 <span class="i">sub ::param_LostFocus</span><span class="s">{</span>
  25   <span class="k">my</span> <span class="i">$param</span> = <span class="i">$win</span><span class="i">-&gt;param</span><span class="i">-&gt;Text</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  26   <span class="i">$param</span> =~ <span class="q">s/^\s+//</span><span class="sc">;</span>
  27   <span class="i">@param</span> = <span class="k">split</span><span class="q">/[- ]+/</span><span class="cm">,</span> <span class="i">$param</span><span class="sc">;</span>
  28   <span class="i">$Crypt::SKey::HASH</span> = <span class="k">uc</span><span class="s">(</span><span class="i">$param</span>[<span class="n">1</span>]<span class="s">)</span><span class="sc">;</span>
  29 <span class="s">}</span>
  30 
  31 <span class="c">#Trapping &#39;VK_ENTER&#39; is a bear so recalculate as we go, plus it looks cool</span>
  32 <span class="i">sub ::pass_Change</span><span class="s">{</span>
  33   <span class="i">$win</span><span class="i">-&gt;skey</span><span class="i">-&gt;Text</span><span class="s">(</span> <span class="i">Crypt::SKey::compute</span><span class="s">(</span><span class="i">@param</span>[<span class="n">2</span><span class="cm">,</span><span class="n">3</span>]<span class="cm">,</span> <span class="i">$win</span><span class="i">-&gt;pass</span><span class="i">-&gt;Text</span><span class="s">(</span><span class="s">)</span><span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
  34   <span class="i">$win</span><span class="i">-&gt;skey</span><span class="i">-&gt;Select</span><span class="s">(</span><span class="n">0</span><span class="cm">,</span><span class="n">-1</span><span class="s">)</span><span class="sc">;</span> <span class="i">$win</span><span class="i">-&gt;skey</span><span class="i">-&gt;Copy</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  35 <span class="s">}</span>
<a name="__DATA__"></a>  36 <span class="k">__DATA__</span>
  37 <span class="q">#Despite documentation, filename parameter to newScalar is not optional</span>
  38 <span class="q">#my $code = decode_base64(do{ local $/; &lt;DATA&gt; });</span>
  39 <span class="q">#my $layout = Win32::GUI::Loft::Design-&gt;newScalar($code, &#39;__DATA__&#39;) or</span>
  40 <span class="q">#  die(&quot;Could not build window file &lt;DATA&gt;\n&quot;);</span>
</pre>
<p><h2><a href="otp2.zip">otp2.zip</a></h2></p>
<p>A PARchive of the script, it does not seem to work under WINE though.</p>
<div style="float: right; font-size: 10pt"><a href="mod3.pod">View Source (POD)</a></div><br />
</body>
</html>
