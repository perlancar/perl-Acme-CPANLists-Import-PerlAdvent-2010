<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.21 (Pod::Simple 3.07, Perl::Tidy 20090616) on 2010-12-21 23:43:37 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2010 Perl Advent Calendar: Robot Santa asks, "Is your code nice enough?"</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod21.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2010-12</a>-21</h1>
<h2 align="center">Robot Santa asks, "Is your code nice enough?"</h2>
<h3 align="center">by Jerrad Pierce</h3>
<p>Even when your hardware's rated at 50 megachecks per second, it is sometimes necessary to streamline your code.<sup><a href="#footnote_evilroot">1</a></sup> Alas, due to the vagaries of processor scheduling, disk access, <em>et cetera</em>, benchmarking is an inherently futile activity, fraught with uncertainty not dissimilar to that experienced in quantum mechanics &hellip;to paraphrase the fine manual of today's feature module. But things are a little better if you apply statistics. Therefore <tt><a href="http://search.cpan.org/perldoc?Benchmark::Timer" title="Benchmark::Timer">Benchmark::Timer</a></tt> uses Student's t-Test to determine how many times it should execute your code so that it can return an accurate run-time, within limits you define, rather than you having to choose and wait for some arbitrarily large number of times to loop.</p>
<pre><span class="c">% perl mod21.pl
69 trials of factorial (532.050ms total), 7.711ms/trial
Error: +/- 0.00038 with 95 confidence</span></pre>
<p>Other features of <tt><span title="Benchmark::Timer">Benchmark::Timer</span></tt> include the abilities to time your code inline without having to roll it into subroutines, and to benchmark arbitrary chunks of code including subsets of the statements included in other "tags." The module also allows you to control for slow and expensive hits incurred by initial runs, such as loading files into the system's buffers, by discarding the data from initial runs with the <span style="font-style: italic">skip</span> option.</p>
<p>Some misfeatures of <tt><span title="Benchmark::Timer">Benchmark::Timer</span></tt> are the need to explicitly specify a <span style="font-style: italic">minimum</span> greater than one in order to ensure adequate statistics are gathered. In addition, it is sometimes necessary e.g; when only one test is run; to <tt><span class="k">sleep</span></tt> or perform some other timely operations before requesting a report from <tt><span title="Benchmark::Timer">Benchmark::Timer</span></tt> so that internal checks the method relies upon are cleared.</p>
<a name="mod21.pl" id="mod21.pl"></a><h2><a href="mod21.pl">mod21.pl</a></h2><pre>
<a name="mod21.pl.1"></a>   1 <span class="k">use</span> <span class="w">Benchmark::Timer</span><span class="sc">;</span>
<a name="mod21.pl.2"></a>   2 
<a name="mod21.pl.3"></a>   3 <span class="k">my</span> <span class="i">$T</span> = <span class="w">Benchmark::Timer</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="w">confidence</span><span class="cm">=&gt;</span><span class="n">95</span><span class="cm">,</span> <span class="w">error</span><span class="cm">=&gt;</span><span class="n">5</span><span class="cm">,</span> <span class="w">minimum</span><span class="cm">=&gt;</span><span class="n">2</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod21.pl.4"></a>   4 
<a name="mod21.pl.5"></a>   5 <span class="k">while</span><span class="s">(</span> <span class="i">$T</span><span class="i">-&gt;need_more_samples</span><span class="s">(</span><span class="q">&#39;factorial&#39;</span><span class="s">)</span> <span class="s">)</span><span class="s">{</span>
<a name="mod21.pl.6"></a>   6   <span class="i">$T</span><span class="i">-&gt;start</span><span class="s">(</span><span class="q">&#39;factorial&#39;</span><span class="s">)</span><span class="sc">;</span>
<a name="mod21.pl.7"></a>   7   <span class="i">factorial</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span> <span class="k">foreach</span> <span class="n">0</span>..<span class="n">123</span><span class="sc">;</span>
<a name="mod21.pl.8"></a>   8   <span class="i">$T</span><span class="i">-&gt;stop</span><span class="s">(</span><span class="q">&#39;factorial&#39;</span><span class="s">)</span><span class="sc">;</span>
<a name="mod21.pl.9"></a>   9 <span class="s">}</span>
<a name="mod21.pl.10"></a>  10 
<a name="mod21.pl.11"></a>  11 <span class="k">print</span> <span class="i">$T</span><span class="i">-&gt;report</span><span class="sc">;</span>
<a name="mod21.pl.12"></a>  12 
<a name="factorial"></a>  13 <span class="k">sub </span><span class="m">factorial</span><span class="s">{</span>
<a name="mod21.pl.14"></a>  14   <span class="i">$_</span>[<span class="n">0</span>] &gt; <span class="n">1</span> ? <span class="i">$_</span>[<span class="n">0</span>] * <span class="i">factorial</span><span class="s">(</span><span class="i">$_</span>[<span class="n">0</span>]-<span class="n">1</span><span class="s">)</span> <span class="co">:</span> <span class="n">1</span><span class="sc">;</span>
<a name="mod21.pl.15"></a>  15 <span class="s">}</span>
</pre>
<p><a name="footnote_evilroot" id="footnote_evilroot"></a>1. Just be sure to stay on the nice list and avoid the temptation of premature optimization.<br>
</p>
<div style="float: right; font-size: 10pt"><a href="mod21.pod">View Source (POD)</a></div><br />
</body>
</html>
