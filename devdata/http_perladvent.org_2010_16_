<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.21 (Pod::Simple 3.07, Perl::Tidy 20090616) on 2010-12-16 19:01:31 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2010 Perl Advent Calendar: 'Net stockings are barely servicable gift receptacles</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod16.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2010-12</a>-16</h1>
<h2 align="center">'Net stockings are barely servicable gift receptacles</h2>
<h3 align="center">by Stephen R. Scaffidi</h3>
<p>Santa needed to implement a server to collect naughty/nice lists from all over the world. The IT elves needed a quick solution that allowed Naughty Montoring Service offices in far flung corners across the globe to report their extensive child behavioral data to HQ for analysis.</p>
<p>In the end the North Pole settled on <tt><a href="http://search.cpan.org/perldoc?Net::Server" title="Net::Server">Net::Server</a></tt>, a comprehensive, flexible, and robust framework used by numerous other packages such as <tt>Catalyst::Engine::Server</tt> and <tt>Starman</tt>. It handles the gritty details of listening on one or more sockets, forking and daemonising, buffering, logging and even more. In some cases it takes more control of things than you might want (like signal handling), but before you give-up and roll your own, ask yourself: Do you <span style="font-weight: bold">really</span> need your server to be an ornament polish and a gingerbread house spackle?</p>
<p><tt><span title="Net::Server">Net::Server</span></tt> has extensive documentation, but our example script below should hopefully provide a comparatively short introduction.</p>
<a name="mod16.pl" id="mod16.pl"></a><h2><a href="mod16.pl">mod16.pl</a></h2><pre>
<a name="mod16.pl.1"></a>   1 <span class="c"># Run the server, unless this code is being loaded as a module</span>
<a name="mod16.pl.2"></a>   2 <span class="w">Xmas::NMS::Server</span><span class="w">-&gt;run</span><span class="s">(</span><span class="s">)</span> <span class="k">unless</span> <span class="k">caller</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.3"></a>   3 
<a name="package-Xmas::NMS::Server"></a>   4 <span class="k">package </span><span class="i">Xmas::NMS::Server</span><span class="sc">;</span>
<a name="mod16.pl.5"></a>   5 <span class="k">use</span> <span class="w">base</span> <span class="q">qw(Net::Server::PreFork)</span><span class="sc">;</span>
<a name="mod16.pl.6"></a>   6 <span class="k">use</span> <span class="w">Carp</span><span class="sc">;</span>
<a name="mod16.pl.7"></a>   7 <span class="k">use</span> <span class="w">Scalar::Util</span> <span class="q">qw(blessed)</span><span class="sc">;</span>
<a name="mod16.pl.8"></a>   8 <span class="k">use</span> <span class="w">File::Basename</span> <span class="q">qw(dirname)</span><span class="sc">;</span>
<a name="mod16.pl.9"></a>   9 <span class="k">use</span> <span class="w">File::Spec::Functions</span> <span class="q">qw(catdir)</span><span class="sc">;</span>
<a name="mod16.pl.10"></a>  10 
<a name="mod16.pl.11"></a>  11 <span class="c"># Net::Server can take options from the command line, a</span>
<a name="mod16.pl.12"></a>  12 <span class="c"># config file, or as parameters to new() or run(). Using</span>
<a name="mod16.pl.13"></a>  13 <span class="c"># this method, you can override and add options that</span>
<a name="mod16.pl.14"></a>  14 <span class="c"># Net::Server will then recognize from any of those places</span>
<a name="options"></a>  15 <span class="k">sub </span><span class="m">options</span> <span class="s">{</span>
<a name="mod16.pl.16"></a>  16     <span class="k">my</span> <span class="s">(</span> <span class="i">$self</span><span class="cm">,</span> <span class="i">$template</span> <span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>  <span class="c"># template is a hashref</span>
<a name="mod16.pl.17"></a>  17     <span class="k">my</span> <span class="i">$props</span> = <span class="i">$self</span>-&gt;{<span class="w">server</span>}<span class="sc">;</span>   <span class="c"># server properties</span>
<a name="mod16.pl.18"></a>  18 
<a name="mod16.pl.19"></a>  19     <span class="c"># load the base class&#39; options into the template</span>
<a name="mod16.pl.20"></a>  20     <span class="i">$self</span><span class="i">-&gt;SUPER::options</span><span class="s">(</span> <span class="i">$template</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.21"></a>  21 
<a name="mod16.pl.22"></a>  22     <span class="c"># create a property entry for the new option</span>
<a name="mod16.pl.23"></a>  23     <span class="i">$props</span>-&gt;{<span class="w">nms_authkey</span>} ||= <span class="k">undef</span><span class="sc">;</span>
<a name="mod16.pl.24"></a>  24 
<a name="mod16.pl.25"></a>  25     <span class="c"># put a reference to that entry into the template</span>
<a name="mod16.pl.26"></a>  26     <span class="i">$template</span>-&gt;{<span class="w">nms_authkey</span>} = \<span class="i">$props</span>-&gt;{<span class="w">nms_authkey</span>}<span class="sc">;</span>
<a name="mod16.pl.27"></a>  27 
<a name="mod16.pl.28"></a>  28     <span class="c"># when the options are processed by Net::Server,</span>
<a name="mod16.pl.29"></a>  29     <span class="c"># their values will be stored in the referenced</span>
<a name="mod16.pl.30"></a>  30     <span class="c"># server property entries</span>
<a name="mod16.pl.31"></a>  31 
<a name="mod16.pl.32"></a>  32     <span class="c"># use an arrayref for multi-valued options</span>
<a name="mod16.pl.33"></a>  33     <span class="i">$props</span>-&gt;{<span class="w">nms_regions</span>} ||= <span class="s">[</span><span class="s">]</span><span class="sc">;</span>
<a name="mod16.pl.34"></a>  34     <span class="i">$template</span>-&gt;{<span class="w">nms_regions</span>} = <span class="i">$props</span>-&gt;{<span class="w">nms_regions</span>}<span class="sc">;</span>
<a name="mod16.pl.35"></a>  35 
<a name="mod16.pl.36"></a>  36     <span class="c"># you can do each type in one line, if you like...</span>
<a name="mod16.pl.37"></a>  37     <span class="i">$template</span>-&gt;{<span class="q">&quot;nms_$_&quot;</span>} = \<span class="i">$props</span>-&gt;{<span class="q">&quot;nms_$_&quot;</span>}
<a name="mod16.pl.38"></a>  38         <span class="k">for</span> <span class="s">(</span> <span class="q">qw( data_dir client_timeout)</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.39"></a>  39 
<a name="mod16.pl.40"></a>  40     <span class="i">$template</span>-&gt;{<span class="w">nms_data_types</span>} = <span class="i">$props</span>-&gt;{<span class="w">nms_data_types</span>} ||= <span class="s">[</span><span class="s">]</span><span class="sc">;</span>
<a name="mod16.pl.41"></a>  41 <span class="s">}</span>
<a name="mod16.pl.42"></a>  42 
<a name="mod16.pl.43"></a>  43 <span class="c"># If you want to set some defaults differently or in</span>
<a name="mod16.pl.44"></a>  44 <span class="c"># addition to those already used by Net::Server, put</span>
<a name="mod16.pl.45"></a>  45 <span class="c"># them in a hash returned by this method.</span>
<a name="default_values"></a>  46 <span class="k">sub </span><span class="m">default_values</span> <span class="s">{</span>
<a name="mod16.pl.47"></a>  47     <span class="k">return</span> <span class="s">{</span>
<a name="mod16.pl.48"></a>  48         <span class="w">port</span> <span class="cm">=&gt;</span> <span class="n">8765</span><span class="cm">,</span>
<a name="mod16.pl.49"></a>  49         <span class="w">nms_client_timeout</span> <span class="cm">=&gt;</span> <span class="n">30</span><span class="cm">,</span>
<a name="mod16.pl.50"></a>  50 
<a name="mod16.pl.51"></a>  51         <span class="c"># types of data collected by the agency</span>
<a name="mod16.pl.52"></a>  52         <span class="w">nms_data_types</span> <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">qw(observations hearsay gift_lists)</span><span class="s">]</span><span class="cm">,</span>
<a name="mod16.pl.53"></a>  53 
<a name="mod16.pl.54"></a>  54         <span class="c"># where to look for the data files</span>
<a name="mod16.pl.55"></a>  55         <span class="w">nms_data_dir</span> <span class="cm">=&gt;</span> <span class="i">catdir</span><span class="s">(</span> <span class="i">dirname</span><span class="s">(</span> <span class="i">$0</span> <span class="s">)</span><span class="cm">,</span> <span class="q">&#39;data&#39;</span> <span class="s">)</span><span class="cm">,</span>
<a name="mod16.pl.56"></a>  56     <span class="s">}</span><span class="sc">;</span>
<a name="mod16.pl.57"></a>  57 <span class="s">}</span>
<a name="mod16.pl.58"></a>  58 
<a name="mod16.pl.59"></a>  59 <span class="c"># use this method to validate the values of your options</span>
<a name="post_configure_hook"></a>  60 <span class="k">sub </span><span class="m">post_configure_hook</span> <span class="s">{</span>
<a name="mod16.pl.61"></a>  61     <span class="k">my</span> <span class="s">(</span> <span class="i">$self</span> <span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>
<a name="mod16.pl.62"></a>  62     <span class="k">my</span> <span class="i">$props</span> = <span class="i">$self</span>-&gt;{<span class="w">server</span>}<span class="sc">;</span>
<a name="mod16.pl.63"></a>  63 
<a name="mod16.pl.64"></a>  64     <span class="i">@</span>{ <span class="i">$props</span>-&gt;{<span class="w">nms_regions</span>} }
<a name="mod16.pl.65"></a>  65         || <span class="w">croak</span> <span class="q">&quot;Please specify one or more values for nms_regions&quot;</span><span class="sc">;</span>
<a name="mod16.pl.66"></a>  66 
<a name="mod16.pl.67"></a>  67     <span class="i">$props</span>-&gt;{<span class="w">nms_authkey</span>}
<a name="mod16.pl.68"></a>  68         || <span class="w">croak</span> <span class="q">&quot;Please specify a value for nms_authkey&quot;</span><span class="sc">;</span>
<a name="mod16.pl.69"></a>  69 <span class="s">}</span>
<a name="mod16.pl.70"></a>  70 
<a name="mod16.pl.71"></a>  71 <span class="c"># if you want to use authorization more involved than</span>
<a name="mod16.pl.72"></a>  72 <span class="c"># checking the client&#39;s IP address, use this hook</span>
<a name="allow_deny_hook"></a>  73 <span class="k">sub </span><span class="m">allow_deny_hook</span> <span class="s">{</span>
<a name="mod16.pl.74"></a>  74     <span class="k">my</span> <span class="s">(</span> <span class="i">$self</span> <span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>
<a name="mod16.pl.75"></a>  75     <span class="k">my</span> <span class="i">$props</span> = <span class="i">$self</span>-&gt;{<span class="w">server</span>}<span class="sc">;</span>
<a name="mod16.pl.76"></a>  76 
<a name="mod16.pl.77"></a>  77     <span class="c"># prompt</span>
<a name="mod16.pl.78"></a>  78     <span class="i">$self</span><span class="i">-&gt;sendtext</span><span class="s">(</span> <span class="q">&quot;auth: &quot;</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.79"></a>  79 
<a name="mod16.pl.80"></a>  80     <span class="k">my</span> <span class="i">$line</span> = <span class="i">$self</span><span class="i">-&gt;getline_timeout</span> || <span class="k">return</span><span class="sc">;</span>
<a name="mod16.pl.81"></a>  81 
<a name="mod16.pl.82"></a>  82     <span class="c"># authorized? return truth</span>
<a name="mod16.pl.83"></a>  83     <span class="k">return</span> <span class="n">1</span> <span class="k">if</span> <span class="i">$line</span> <span class="k">eq</span> <span class="i">$props</span>-&gt;{<span class="w">nms_authkey</span>}<span class="sc">;</span>
<a name="mod16.pl.84"></a>  84 
<a name="mod16.pl.85"></a>  85     <span class="c"># not authorized? return false</span>
<a name="mod16.pl.86"></a>  86     <span class="k">my</span> <span class="i">$client_ip</span> = <span class="i">$props</span>-&gt;{<span class="w">peeraddr</span>} || <span class="q">&#39;unknown&#39;</span><span class="sc">;</span>
<a name="mod16.pl.87"></a>  87     <span class="i">$self</span><span class="i">-&gt;sendlines</span><span class="s">(</span> 
<a name="mod16.pl.88"></a>  88         <span class="q">&quot;AUTHORIZATION FAILED FROM IP [$client_ip]&quot;</span><span class="cm">,</span>
<a name="mod16.pl.89"></a>  89         <span class="q">&quot;YOU ARE NOW ON THE NAUGHTY LIST&quot;</span><span class="cm">,</span>
<a name="mod16.pl.90"></a>  90     <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.91"></a>  91 
<a name="mod16.pl.92"></a>  92     <span class="k">return</span><span class="sc">;</span>
<a name="mod16.pl.93"></a>  93 <span class="s">}</span>
<a name="mod16.pl.94"></a>  94 
<a name="mod16.pl.95"></a>  95 <span class="c"># continuation of authorized connections</span>
<a name="process_request"></a>  96 <span class="k">sub </span><span class="m">process_request</span> <span class="s">{</span>
<a name="mod16.pl.97"></a>  97     <span class="k">my</span> <span class="s">(</span> <span class="i">$self</span> <span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>
<a name="mod16.pl.98"></a>  98 
<a name="mod16.pl.99"></a>  99     <span class="k">my</span> <span class="i">$props</span>     = <span class="i">$self</span>-&gt;{<span class="w">server</span>}<span class="sc">;</span>
<a name="mod16.pl.100"></a> 100     <span class="k">my</span> <span class="i">$client_fh</span> = <span class="i">$props</span>-&gt;{<span class="w">client</span>}<span class="sc">;</span>
<a name="mod16.pl.101"></a> 101 
<a name="mod16.pl.102"></a> 102     <span class="i">$self</span><span class="i">-&gt;sendlines</span><span class="s">(</span>
<a name="mod16.pl.103"></a> 103         <span class="q">&quot;&quot;</span><span class="cm">,</span>
<a name="mod16.pl.104"></a> 104         <span class="q">&quot;Welcome to the NMS server for the following regions:&quot;</span><span class="cm">,</span>
<a name="mod16.pl.105"></a> 105         <span class="s">(</span> <span class="k">map</span> <span class="s">{</span><span class="q">&quot;\t$_&quot;</span><span class="s">}</span> <span class="i">@</span>{ <span class="i">$props</span>-&gt;{<span class="w">nms_regions</span>} } <span class="s">)</span><span class="cm">,</span>
<a name="mod16.pl.106"></a> 106         <span class="q">&quot;&quot;</span><span class="cm">,</span>
<a name="mod16.pl.107"></a> 107         <span class="q">&quot;Enter the name of a snot-nosed brat or QUIT to logout.&quot;</span><span class="cm">,</span>
<a name="mod16.pl.108"></a> 108         <span class="q">&quot;NOTE: children actually named &#39;QUIT&#39; have a tough life&quot;</span><span class="cm">,</span>
<a name="mod16.pl.109"></a> 109         <span class="q">&quot;already and automatically get a pony EVERY YEAR&quot;</span><span class="cm">,</span>
<a name="mod16.pl.110"></a> 110         <span class="q">&quot;&quot;</span><span class="cm">,</span>
<a name="mod16.pl.111"></a> 111     <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.112"></a> 112 
<a name="mod16.pl.113"></a> 113     <span class="k">while</span> <span class="s">(</span> <span class="i">$self</span><span class="i">-&gt;sendtext</span><span class="s">(</span> <span class="q">&quot;name: &quot;</span> <span class="s">)</span>
<a name="mod16.pl.114"></a> 114         <span class="k">and</span> <span class="k">defined</span><span class="s">(</span> <span class="k">my</span> <span class="i">$name</span> = <span class="i">$self</span><span class="i">-&gt;getline_timeout</span> <span class="s">)</span> <span class="s">)</span>
<a name="mod16.pl.115"></a> 115     <span class="s">{</span>
<a name="mod16.pl.116"></a> 116         <span class="k">return</span> <span class="k">if</span> <span class="i">$name</span> <span class="k">eq</span> <span class="q">&#39;QUIT&#39;</span><span class="sc">;</span>
<a name="mod16.pl.117"></a> 117         <span class="i">$self</span><span class="i">-&gt;sendlines</span><span class="s">(</span> <span class="q">&quot;\t$name is a rotten little kid&quot;</span><span class="cm">,</span> <span class="q">&quot;&quot;</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.118"></a> 118     <span class="s">}</span>
<a name="mod16.pl.119"></a> 119 
<a name="mod16.pl.120"></a> 120 <span class="s">}</span>
<a name="mod16.pl.121"></a> 121 
<a name="mod16.pl.122"></a> 122 <span class="c"># this isn&#39;t a Net::Server hook, it&#39;s just a helper</span>
<a name="mod16.pl.123"></a> 123 <span class="c"># to get a line from the client within a timeout</span>
<a name="getline_timeout"></a> 124 <span class="k">sub </span><span class="m">getline_timeout</span> <span class="s">{</span>
<a name="mod16.pl.125"></a> 125     <span class="k">my</span> <span class="s">(</span> <span class="i">$self</span><span class="cm">,</span> <span class="i">$client_fh</span><span class="cm">,</span> <span class="i">$timeout</span> <span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>
<a name="mod16.pl.126"></a> 126 
<a name="mod16.pl.127"></a> 127     <span class="i">$client_fh</span> ||= <span class="i">$self</span>-&gt;{<span class="w">server</span>}{<span class="w">client</span>}<span class="sc">;</span>
<a name="mod16.pl.128"></a> 128     <span class="i">$timeout</span>   ||= <span class="i">$self</span>-&gt;{<span class="w">server</span>}{<span class="w">nms_client_timeout</span>}<span class="sc">;</span>
<a name="mod16.pl.129"></a> 129 
<a name="mod16.pl.130"></a> 130     <span class="c"># attempt to get a line from the client within the timeout</span>
<a name="mod16.pl.131"></a> 131     <span class="k">my</span> <span class="i">$line</span> = <span class="k">eval</span> <span class="s">{</span>
<a name="mod16.pl.132"></a> 132 
<a name="mod16.pl.133"></a> 133         <span class="c"># set an alarm to throw an exception...</span>
<a name="mod16.pl.134"></a> 134         <span class="k">local</span> <span class="i">$SIG</span>{<span class="q">&#39;ALRM&#39;</span>} = <span class="k">sub</span> <span class="s">{</span> <span class="k">die</span> <span class="q">&quot;Timed Out!\n&quot;</span> <span class="s">}</span><span class="sc">;</span>
<a name="mod16.pl.135"></a> 135         <span class="k">my</span> <span class="i">$previous_alarm</span> = <span class="k">alarm</span><span class="s">(</span> <span class="i">$timeout</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.136"></a> 136 
<a name="mod16.pl.137"></a> 137         <span class="k">my</span> <span class="i">$line</span> = <span class="i">$client_fh</span><span class="i">-&gt;getline</span><span class="sc">;</span>
<a name="mod16.pl.138"></a> 138 
<a name="mod16.pl.139"></a> 139         <span class="c"># restore the old alarm value</span>
<a name="mod16.pl.140"></a> 140         <span class="k">alarm</span><span class="s">(</span> <span class="i">$previous_alarm</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.141"></a> 141 
<a name="mod16.pl.142"></a> 142         <span class="c"># return the line from the eval</span>
<a name="mod16.pl.143"></a> 143         <span class="i">$line</span><span class="sc">;</span>
<a name="mod16.pl.144"></a> 144     <span class="s">}</span><span class="sc">;</span>
<a name="mod16.pl.145"></a> 145 
<a name="mod16.pl.146"></a> 146     <span class="c"># if the alarm went off, catch the exception</span>
<a name="mod16.pl.147"></a> 147     <span class="k">if</span> <span class="s">(</span> <span class="i">$@</span> =~ <span class="q">/timed out/i</span> <span class="s">)</span> <span class="s">{</span>
<a name="mod16.pl.148"></a> 148         <span class="i">$self</span><span class="i">-&gt;sendlines</span><span class="s">(</span>
<a name="mod16.pl.149"></a> 149             <span class="i">$client_fh</span><span class="cm">,</span>
<a name="mod16.pl.150"></a> 150             <span class="q">&quot;Timed Out - You were too slow-ho-ho!&quot;</span>
<a name="mod16.pl.151"></a> 151         <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.152"></a> 152         <span class="k">return</span><span class="sc">;</span>
<a name="mod16.pl.153"></a> 153     <span class="s">}</span>
<a name="mod16.pl.154"></a> 154 
<a name="mod16.pl.155"></a> 155     <span class="c"># getline can return undef...</span>
<a name="mod16.pl.156"></a> 156     <span class="k">return</span> <span class="k">unless</span> <span class="k">defined</span> <span class="i">$line</span><span class="sc">;</span>
<a name="mod16.pl.157"></a> 157 
<a name="mod16.pl.158"></a> 158     <span class="c"># strip out any end-of-line chars</span>
<a name="mod16.pl.159"></a> 159     <span class="i">$line</span> =~ <span class="q">s/\r?\n$//</span><span class="sc">;</span>
<a name="mod16.pl.160"></a> 160     <span class="k">return</span> <span class="i">$line</span><span class="sc">;</span>
<a name="mod16.pl.161"></a> 161 <span class="s">}</span>
<a name="mod16.pl.162"></a> 162 
<a name="mod16.pl.163"></a> 163 
<a name="mod16.pl.164"></a> 164 <span class="c"># another helper method to make decorate text with newlines</span>
<a name="sendlines"></a> 165 <span class="k">sub </span><span class="m">sendlines</span> <span class="s">{</span>
<a name="mod16.pl.166"></a> 166     <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
<a name="mod16.pl.167"></a> 167     <span class="k">my</span> <span class="s">(</span><span class="i">$client_fh</span><span class="cm">,</span> <span class="i">@lines</span><span class="s">)</span> = <span class="i">$self</span><span class="i">-&gt;_client_fh_from_args</span><span class="s">(</span> <span class="i">@_</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.168"></a> 168     <span class="i">$self</span><span class="i">-&gt;sendtext</span><span class="s">(</span> <span class="i">$client_fh</span><span class="cm">,</span> <span class="k">map</span> <span class="s">{</span> <span class="q">&quot;$_\r\n&quot;</span> <span class="s">}</span> <span class="i">@lines</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.169"></a> 169 <span class="s">}</span>
<a name="mod16.pl.170"></a> 170 
<a name="mod16.pl.171"></a> 171 <span class="c"># concatenate text and send to client undecorated</span>
<a name="sendtext"></a> 172 <span class="k">sub </span><span class="m">sendtext</span> <span class="s">{</span>
<a name="mod16.pl.173"></a> 173     <span class="k">my</span> <span class="s">(</span> <span class="i">$self</span> <span class="s">)</span> = <span class="k">shift</span><span class="sc">;</span>
<a name="mod16.pl.174"></a> 174 
<a name="mod16.pl.175"></a> 175     <span class="k">my</span> <span class="s">(</span><span class="i">$client_fh</span><span class="cm">,</span> <span class="i">@lines</span><span class="s">)</span> = <span class="i">$self</span><span class="i">-&gt;_client_fh_from_args</span><span class="s">(</span> <span class="i">@_</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.176"></a> 176 
<a name="mod16.pl.177"></a> 177     <span class="i">$client_fh</span><span class="i">-&gt;print</span><span class="s">(</span> <span class="k">map</span> <span class="s">{</span> <span class="k">defined</span><span class="s">(</span> <span class="i">$_</span> <span class="s">)</span> ? <span class="i">$_</span> <span class="co">:</span> <span class="q">&quot;&quot;</span> <span class="s">}</span> <span class="i">@lines</span> <span class="s">)</span>
<a name="mod16.pl.178"></a> 178         <span class="k">or</span> <span class="w">croak</span> <span class="q">&quot;Error sending data to the client!&quot;</span><span class="sc">;</span>
<a name="mod16.pl.179"></a> 179 <span class="s">}</span>
<a name="mod16.pl.180"></a> 180 
<a name="mod16.pl.181"></a> 181 <span class="c"># find out if the first argument is a filehandle. if so, use that.</span>
<a name="mod16.pl.182"></a> 182 <span class="c"># if not, use the client filehandle.</span>
<a name="_client_fh_from_args"></a> 183 <span class="k">sub </span><span class="m">_client_fh_from_args</span> <span class="s">{</span>
<a name="mod16.pl.184"></a> 184     <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
<a name="mod16.pl.185"></a> 185     <span class="k">my</span> <span class="i">$client_fh</span>
<a name="mod16.pl.186"></a> 186         = <span class="s">(</span> <span class="i">blessed</span><span class="s">(</span> <span class="i">$_</span>[<span class="n">0</span>] <span class="s">)</span> &amp;&amp; <span class="i">$_</span>[<span class="n">0</span>]<span class="i">-&gt;can</span><span class="s">(</span> <span class="q">&#39;print&#39;</span> <span class="s">)</span> <span class="s">)</span> ?
<a name="mod16.pl.187"></a> 187             <span class="k">shift</span> <span class="co">:</span> <span class="i">$self</span>-&gt;{<span class="w">server</span>}{<span class="w">client</span>}<span class="sc">;</span>
<a name="mod16.pl.188"></a> 188     <span class="k">return</span> <span class="s">(</span> <span class="i">$client_fh</span><span class="cm">,</span> <span class="i">@_</span> <span class="s">)</span><span class="sc">;</span>
<a name="mod16.pl.189"></a> 189 <span class="s">}</span>
<a name="mod16.pl.190"></a> 190 
<a name="mod16.pl.191"></a> 191 <span class="n">1</span><span class="sc">;</span>
</pre>
<div style="float: right; font-size: 10pt"><a href="mod16.pod">View Source (POD)</a></div><br />
</body>
</html>
